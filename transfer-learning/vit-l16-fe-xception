{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.13"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":10215637,"sourceType":"datasetVersion","datasetId":6198240},{"sourceId":616,"sourceType":"modelInstanceVersion","isSourceIdPinned":false,"modelInstanceId":483,"modelId":40},{"sourceId":621,"sourceType":"modelInstanceVersion","isSourceIdPinned":false,"modelInstanceId":488,"modelId":40},{"sourceId":622,"sourceType":"modelInstanceVersion","isSourceIdPinned":false,"modelInstanceId":489,"modelId":40},{"sourceId":630,"sourceType":"modelInstanceVersion","isSourceIdPinned":false,"modelInstanceId":497,"modelId":40}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import *\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.model_selection import train_test_split\nimport os\nimport json\nimport tensorflow_hub as hub\nimport warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T19:51:32.851533Z","iopub.execute_input":"2025-08-30T19:51:32.851929Z","iopub.status.idle":"2025-08-30T19:51:32.857536Z","shell.execute_reply.started":"2025-08-30T19:51:32.851904Z","shell.execute_reply":"2025-08-30T19:51:32.856831Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# Data loading code\ndef create_df(path):\n    dd = {\"images\": [], \"labels\": []}\n\n    for i in os.listdir(path):\n        img_dir = os.path.join(path, i)\n        \n        # Skip if not a directory (this fixes your error)\n        if not os.path.isdir(img_dir):\n            print(f\"Skipping non-directory: {i}\")\n            continue\n        \n        # Get subdirectories only\n        subdirs = [d for d in os.listdir(img_dir) if os.path.isdir(os.path.join(img_dir, d))]\n        if len(subdirs) == 0:\n            print(f\"No subdirectories found in: {i}\")\n            continue\n            \n        addition = subdirs[0]\n        img_dir_full = os.path.join(img_dir, addition)\n        \n        index = 0\n        for j in os.listdir(img_dir_full):\n            if j.endswith(\".png\"):\n                dd[\"images\"].append(os.path.join(img_dir_full, j))\n                dd[\"labels\"].append(i)\n                index += 1\n                if index >= 400:\n                    break\n\n    return pd.DataFrame(dd)\n\n# Configuration\nclass Config:\n    EPOCHS = 50\n    IMG_SIZE = 224\n    BATCH_SIZE = 16\n    LR = 0.001\n    VALIDATION_SPLIT = 0.2\n    TEST_SPLIT = 0.1\n    SEED = 229\n    \n    # Model specific settings\n    PATIENCE = 10\n    FACTOR = 0.5\n    MIN_LR = 1e-7","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T19:51:32.860441Z","iopub.execute_input":"2025-08-30T19:51:32.860697Z","iopub.status.idle":"2025-08-30T19:51:32.881569Z","shell.execute_reply.started":"2025-08-30T19:51:32.860679Z","shell.execute_reply":"2025-08-30T19:51:32.880962Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"# Data preprocessing functions\ndef preprocess_image(image_path, img_size=Config.IMG_SIZE):\n    \"\"\"Load and preprocess a single image\"\"\"\n    image = tf.io.read_file(image_path)\n    image = tf.image.decode_png(image, channels=3)\n    image = tf.image.resize(image, [img_size, img_size])\n    image = tf.cast(image, tf.float32) / 255.0\n    image = (image - 0.5) * 2.0\n    return image\n\ndef create_dataset(df, batch_size=Config.BATCH_SIZE, shuffle=True, augment=False):\n    \"\"\"Create TensorFlow dataset from DataFrame\"\"\"\n    \n    def load_and_preprocess_image(path, label):\n        return preprocess_image(path), label\n    \n    # Create dataset from paths and labels\n    dataset = tf.data.Dataset.from_tensor_slices((df['images'].values, df['labels'].values))\n    dataset = dataset.map(load_and_preprocess_image, num_parallel_calls=tf.data.AUTOTUNE)\n    \n    if shuffle:\n        dataset = dataset.shuffle(buffer_size=1000, seed=Config.SEED)\n    \n    if augment:\n        dataset = dataset.map(augment_image, num_parallel_calls=tf.data.AUTOTUNE)\n    \n    dataset = dataset.batch(batch_size)\n    dataset = dataset.prefetch(tf.data.AUTOTUNE)\n    \n    return dataset","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T19:51:32.882589Z","iopub.execute_input":"2025-08-30T19:51:32.882849Z","iopub.status.idle":"2025-08-30T19:51:32.902331Z","shell.execute_reply.started":"2025-08-30T19:51:32.882827Z","shell.execute_reply":"2025-08-30T19:51:32.901502Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"def augment_image(image, label):\n    \"\"\"Data augmentation function\"\"\"\n    # image = tf.image.random_flip_left_right(image)\n    # image = tf.image.random_brightness(image, 0.1)\n    # image = tf.image.random_contrast(image, 0.9, 1.1)\n    # image = tf.image.random_saturation(image, 0.9, 1.1)\n    # image = tf.image.random_hue(image, 0.05)\n    # # Random rotation\n    # image = tf.image.rot90(image, k=tf.random.uniform([], 0, 4, dtype=tf.int32))\n    return image, label","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T19:51:32.903173Z","iopub.execute_input":"2025-08-30T19:51:32.903369Z","iopub.status.idle":"2025-08-30T19:51:32.922211Z","shell.execute_reply.started":"2025-08-30T19:51:32.903354Z","shell.execute_reply":"2025-08-30T19:51:32.921491Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"def build_model(input_shape, num_classes):\n    inputs = keras.Input(shape=input_shape)\n    \n    # ViT branch - Using Lambda wrapper to handle symbolic tensor issues\n    vit_hub_path = \"/kaggle/input/vision-transformer/tensorflow2/vit-l16-fe/1\"\n    vit_features = layers.Lambda(\n        lambda x: hub.KerasLayer(vit_hub_path, trainable=True)(x),\n        name='vit_lambda'\n    )(inputs)\n    \n    # CNN branch  \n    cnn_base = Xception(\n        weights='imagenet',\n        include_top=False,\n        input_shape=input_shape\n    )\n    cnn_base.trainable = True\n    cnn_features = cnn_base(inputs)\n    cnn_features = layers.GlobalAveragePooling2D()(cnn_features)\n    \n    # Combine features\n    combined = layers.concatenate([vit_features, cnn_features])\n    \n    # Classification head\n    x = layers.Dense(512, activation='relu')(combined)\n    x = layers.Dropout(0.3)(x)\n    x = layers.Dense(256, activation='relu')(x)\n    x = layers.Dropout(0.3)(x)\n    outputs = layers.Dense(num_classes, activation='softmax')(x)\n    \n    model = keras.Model(inputs=inputs, outputs=outputs)\n    return model\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T19:58:20.681511Z","iopub.execute_input":"2025-08-30T19:58:20.682056Z","iopub.status.idle":"2025-08-30T19:58:20.688333Z","shell.execute_reply.started":"2025-08-30T19:58:20.682034Z","shell.execute_reply":"2025-08-30T19:58:20.687537Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"# Training function\ndef train_model(model, train_dataset, val_dataset, model_name, epochs=Config.EPOCHS, save_json=True):\n    \"\"\"Train a model with callbacks and return history\"\"\"\n    \n    # Compile model\n    model.compile(\n        optimizer=Adam(learning_rate=Config.LR),\n        loss='sparse_categorical_crossentropy',\n        metrics=['accuracy']\n    )\n    \n    # Callbacks\n    callbacks = [\n        ReduceLROnPlateau(\n            monitor='val_loss',\n            factor=Config.FACTOR,\n            patience=Config.PATIENCE//2,\n            min_lr=Config.MIN_LR,\n            verbose=1\n        ),\n        ModelCheckpoint(\n            f'best_{model_name}.h5',\n            monitor='val_accuracy',\n            save_best_only=True,\n            verbose=1\n        )\n    ]\n    \n    # Train model\n    history = model.fit(\n        train_dataset,\n        validation_data=val_dataset,\n        epochs=epochs,\n        callbacks=callbacks,\n        verbose=1\n    )\n    \n    return history","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T19:51:32.938726Z","iopub.execute_input":"2025-08-30T19:51:32.939049Z","iopub.status.idle":"2025-08-30T19:51:32.957993Z","shell.execute_reply.started":"2025-08-30T19:51:32.939024Z","shell.execute_reply":"2025-08-30T19:51:32.957271Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"def save_metrics_to_json(history, evaluation_metrics, model_name, filename=None):\n    \"\"\"\n    Save training history and evaluation metrics to a JSON file.\n    \n    Args:\n        history: keras.callbacks.History object from model training\n        evaluation_metrics: dict containing evaluation data\n        model_name: name of the model\n        filename: optional custom filename, otherwise auto-generated\n    \"\"\"\n    if filename is None:\n        filename = f\"{model_name}_metrics.json\"\n    \n    # Convert numpy arrays to lists for JSON serialization\n    def convert_to_serializable(obj):\n        if isinstance(obj, np.ndarray):\n            return obj.tolist()\n        elif isinstance(obj, np.float32) or isinstance(obj, np.float64):\n            return float(obj)\n        elif isinstance(obj, np.int32) or isinstance(obj, np.int64):\n            return int(obj)\n        return obj\n    \n    # Prepare data to save\n    metrics_data = {\n        \"model_name\": model_name,\n        \"training_history\": {\n            key: [convert_to_serializable(val) for val in values] \n            for key, values in history.history.items()\n        },\n        \"evaluation_metrics\": {\n            key: convert_to_serializable(value) \n            for key, value in evaluation_metrics.items()\n        },\n        \"training_info\": {\n            \"total_epochs\": len(history.history['loss']),\n            \"best_val_accuracy\": convert_to_serializable(max(history.history.get('val_accuracy', [0]))),\n            \"best_val_loss\": convert_to_serializable(min(history.history.get('val_loss', [float('inf')]))),\n            \"final_train_accuracy\": convert_to_serializable(history.history['accuracy'][-1]),\n            \"final_train_loss\": convert_to_serializable(history.history['loss'][-1])\n        }\n    }\n    \n    # Save to JSON file\n    with open(filename, 'w') as f:\n        json.dump(metrics_data, f, indent=4)\n    \n    print(f\"Metrics saved to {filename}\")\n    return filename","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T19:51:32.969960Z","iopub.execute_input":"2025-08-30T19:51:32.970618Z","iopub.status.idle":"2025-08-30T19:51:32.979526Z","shell.execute_reply.started":"2025-08-30T19:51:32.970582Z","shell.execute_reply":"2025-08-30T19:51:32.978923Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# Evaluation functions\ndef evaluate_model(model, test_dataset, test_labels, class_names, model_name, save_json=True):\n    \"\"\"Comprehensive model evaluation with JSON saving\"\"\"\n    \n    # Get predictions\n    predictions = model.predict(test_dataset)\n    y_pred = np.argmax(predictions, axis=1)\n    \n    # Calculate metrics\n    accuracy = accuracy_score(test_labels, y_pred)\n    \n    print(f\"\\n=== {model_name} Evaluation ===\")\n    print(f\"Test Accuracy: {accuracy:.4f}\")\n    \n    # Classification report (as dictionary for JSON)\n    clf_report_dict = classification_report(test_labels, y_pred, \n                                          target_names=class_names, \n                                          output_dict=True)\n    \n    # Classification report (as string for display)\n    clf_report_str = classification_report(test_labels, y_pred, \n                                         target_names=class_names)\n    print(\"\\nClassification Report:\")\n    print(clf_report_str)\n    \n    # Confusion Matrix\n    cm = confusion_matrix(test_labels, y_pred)\n    \n    # Plot confusion matrix\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', \n                xticklabels=class_names, yticklabels=class_names)\n    plt.title(f'Confusion Matrix - {model_name}')\n    plt.ylabel('True Label')\n    plt.xlabel('Predicted Label')\n    plt.tight_layout()\n    plt.savefig(f'{model_name}_confusion_matrix.png', dpi=300, bbox_inches='tight')\n    plt.show()\n    \n    # Prepare evaluation metrics dictionary\n    evaluation_metrics = {\n        'model_name': model_name,\n        'test_accuracy': accuracy,\n        'classification_report_dict': clf_report_dict,\n        'classification_report_str': clf_report_str,\n        'confusion_matrix': cm,\n        'class_names': class_names,\n        'num_test_samples': len(test_labels),\n        'predictions_confidence': np.max(predictions, axis=1),  # confidence scores\n        'prediction_distribution': {\n            class_name: int(np.sum(y_pred == i)) \n            for i, class_name in enumerate(class_names)\n        }\n    }\n    \n    return evaluation_metrics","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T19:51:32.980893Z","iopub.execute_input":"2025-08-30T19:51:32.981131Z","iopub.status.idle":"2025-08-30T19:51:33.000156Z","shell.execute_reply.started":"2025-08-30T19:51:32.981110Z","shell.execute_reply":"2025-08-30T19:51:32.999462Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"def plot_training_history(history, model_name):\n    \"\"\"Plot training history\"\"\"\n    fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n    \n    # Plot accuracy\n    axes[0].plot(history.history['accuracy'], label='Training Accuracy')\n    axes[0].plot(history.history['val_accuracy'], label='Validation Accuracy')\n    axes[0].set_title(f'{model_name} - Training History (Accuracy)')\n    axes[0].set_xlabel('Epoch')\n    axes[0].set_ylabel('Accuracy')\n    axes[0].legend()\n    axes[0].grid(True)\n    \n    # Plot loss\n    axes[1].plot(history.history['loss'], label='Training Loss')\n    axes[1].plot(history.history['val_loss'], label='Validation Loss')\n    axes[1].set_title(f'{model_name} - Training History (Loss)')\n    axes[1].set_xlabel('Epoch')\n    axes[1].set_ylabel('Loss')\n    axes[1].legend()\n    axes[1].grid(True)\n    \n    plt.tight_layout()\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T19:51:33.001069Z","iopub.execute_input":"2025-08-30T19:51:33.001330Z","iopub.status.idle":"2025-08-30T19:51:33.019516Z","shell.execute_reply.started":"2025-08-30T19:51:33.001313Z","shell.execute_reply":"2025-08-30T19:51:33.018734Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Model comparison utilities\nclass ModelComparison:\n    def __init__(self, save_dir=\"model_results\"):\n        self.results = []\n        self.save_dir = save_dir\n        os.makedirs(save_dir, exist_ok=True)\n    \n    def add_result(self, result, history, model_name):\n        \"\"\"Add result and save individual JSON\"\"\"\n        self.results.append(result)\n        \n        # Save individual model metrics\n        json_filename = os.path.join(self.save_dir, f\"{model_name}_metrics.json\")\n        save_metrics_to_json(history, result, model_name, json_filename)\n    \n    def save_comparison_summary(self, filename=\"model_comparison_summary.json\"):\n        \"\"\"Save comparison summary of all models\"\"\"\n        if not self.results:\n            print(\"No results to save\")\n            return\n        \n        # Sort by accuracy\n        sorted_results = sorted(self.results, key=lambda x: x['test_accuracy'], reverse=True)\n        \n        comparison_data = {\n            \"experiment_summary\": {\n                \"total_models_trained\": len(sorted_results),\n                \"best_model\": sorted_results[0]['model_name'],\n                \"best_accuracy\": sorted_results[0]['test_accuracy'],\n                \"worst_model\": sorted_results[-1]['model_name'],\n                \"worst_accuracy\": sorted_results[-1]['test_accuracy'],\n                \"accuracy_range\": sorted_results[0]['test_accuracy'] - sorted_results[-1]['test_accuracy']\n            },\n            \"model_rankings\": [\n                {\n                    \"rank\": i + 1,\n                    \"model_name\": result['model_name'],\n                    \"test_accuracy\": result['test_accuracy'],\n                    \"num_test_samples\": result['num_test_samples']\n                }\n                for i, result in enumerate(sorted_results)\n            ],\n            \"detailed_results\": [\n                {\n                    \"model_name\": result['model_name'],\n                    \"test_accuracy\": result['test_accuracy'],\n                    \"classification_report\": result['classification_report_dict'],\n                    \"prediction_distribution\": result['prediction_distribution']\n                }\n                for result in sorted_results\n            ]\n        }\n        \n        summary_path = os.path.join(self.save_dir, filename)\n        with open(summary_path, 'w') as f:\n            json.dump(comparison_data, f, indent=4)\n        \n        print(f\"Comparison summary saved to {summary_path}\")\n        return comparison_data\n    \n    def compare_models(self):\n        \"\"\"Compare all trained models and save summary\"\"\"\n        if not self.results:\n            print(\"No results to compare\")\n            return\n        \n        # Sort by accuracy\n        sorted_results = sorted(self.results, key=lambda x: x['test_accuracy'], reverse=True)\n        \n        print(\"\\n=== MODEL COMPARISON ===\")\n        print(f\"{'Rank':<5} {'Model Name':<20} {'Accuracy':<10}\")\n        print(\"-\" * 40)\n        \n        for i, result in enumerate(sorted_results, 1):\n            print(f\"{i:<5} {result['model_name']:<20} {result['test_accuracy']:<10.4f}\")\n        \n        # Plot comparison\n        model_names = [r['model_name'] for r in sorted_results]\n        accuracies = [r['test_accuracy'] for r in sorted_results]\n        \n        plt.figure(figsize=(12, 6))\n        bars = plt.bar(range(len(model_names)), accuracies, color='skyblue', edgecolor='navy', alpha=0.7)\n        plt.xlabel('Models')\n        plt.ylabel('Test Accuracy')\n        plt.title('Model Performance Comparison')\n        plt.xticks(range(len(model_names)), model_names, rotation=45, ha='right')\n        plt.ylim(0, 1)\n        \n        # Add value labels on bars\n        for bar, acc in zip(bars, accuracies):\n            plt.text(bar.get_x() + bar.get_width()/2., bar.get_height() + 0.01,\n                    f'{acc:.3f}', ha='center', va='bottom')\n        \n        plt.tight_layout()\n        plt.savefig(os.path.join(self.save_dir, 'model_comparison.png'), dpi=300, bbox_inches='tight')\n        plt.show()\n        \n        # Save comparison summary\n        self.save_comparison_summary()\n        \n        return sorted_results","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T19:51:33.020945Z","iopub.execute_input":"2025-08-30T19:51:33.021173Z","iopub.status.idle":"2025-08-30T19:51:33.037948Z","shell.execute_reply.started":"2025-08-30T19:51:33.021151Z","shell.execute_reply":"2025-08-30T19:51:33.037197Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"# Main execution template\ndef main():\n    \"\"\"Main execution function - modify this for your specific models\"\"\"\n    \n    # Load and prepare data\n    print(\"Loading data...\")\n    train_df = create_df(\"/kaggle/input/well-documented-alzheimers-dataset\")\n    \n    # Create label mappings\n    unique_labels = train_df[\"labels\"].unique()\n    index_label = {i: label for i, label in enumerate(unique_labels)}\n    label_index = {label: i for i, label in enumerate(unique_labels)}\n    \n    train_df[\"labels\"] = train_df[\"labels\"].map(label_index)\n    num_classes = len(unique_labels)\n    class_names = list(unique_labels)\n    \n    print(f\"Number of classes: {num_classes}\")\n    print(f\"Class names: {class_names}\")\n    print(f\"Total samples: {len(train_df)}\")\n    \n    # Split data\n    train_val_df, test_df = train_test_split(\n        train_df, test_size=Config.TEST_SPLIT, \n        stratify=train_df['labels'], random_state=Config.SEED\n    )\n    \n    train_df_final, val_df = train_test_split(\n        train_val_df, test_size=Config.VALIDATION_SPLIT/(1-Config.TEST_SPLIT), \n        stratify=train_val_df['labels'], random_state=Config.SEED\n    )\n    \n    print(f\"Train samples: {len(train_df_final)}\")\n    print(f\"Validation samples: {len(val_df)}\")\n    print(f\"Test samples: {len(test_df)}\")\n    \n    # Create datasets\n    train_dataset = create_dataset(train_df_final, shuffle=True, augment=True)\n    val_dataset = create_dataset(val_df, shuffle=False, augment=False)\n    test_dataset = create_dataset(test_df, shuffle=False, augment=False)\n    \n    # Initialize comparison\n    comparison = ModelComparison(save_dir=\"alzheimer_model_results\")\n    \n    # Dictionary of models to test\n    models_to_test = {\n        'ViT-S16-fe':   'vit-s16-fe',\n        'ViT-B8-fe':    'vit-b8-fe',\n        'ViT-B16-fe':   'vit-b16-fe',\n        'ViT-B32-fe':   'vit-b32-fe',\n        'ViT-L16-fe':   'vit-l16-fe',\n        'ViT-R26-S32-lightaug-fe':  'vit-r26-s32-lightaug-fe',\n        'ViT-R26-S32-medaug-fe':    'vit-r26-s32-medaug-fe',\n        'ViT-R50-L32-fe': 'vit-r50-l32-fe'\n    }\n\n    model_name = \"ViT-l16-fe-Xception\"\n    # Train and evaluate  model\n    print(f\"\\n{'='*60}\")\n    print(f\"Training {model_name}\")\n    print(f\"{'='*60}\")\n    \n    try:\n        # Create model\n        model = build_model(\n            input_shape=(Config.IMG_SIZE, Config.IMG_SIZE, 3),\n            num_classes=num_classes\n        )\n        \n        print(f\"Model architecture created for {model_name}\")\n        print(f\"Total parameters: {model.count_params():,}\")\n        \n        # Train model\n        history = train_model(model, train_dataset, val_dataset, model_name)\n        \n        # Plot training history\n        plot_training_history(history, model_name)\n        \n        # Evaluate model\n        result = evaluate_model(\n            model, test_dataset, test_df['labels'].values, \n            class_names, model_name\n        )\n        \n        # Add to comparison (this will also save individual JSON)\n        comparison.add_result(result, history, model_name)\n        \n        # Clear memory\n        del model\n        tf.keras.backend.clear_session()\n        \n    except Exception as e:\n        print(f\"Error training {model_name}: {str(e)}\")\n    \n    # Final comparison and summary\n    print(f\"\\n{'='*60}\")\n    print(\"FINAL RESULTS\")\n    print(f\"{'='*60}\")\n    final_results = comparison.compare_models()\n    \n    return final_results\n","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","trusted":true,"execution":{"iopub.status.busy":"2025-08-30T19:51:33.038922Z","iopub.execute_input":"2025-08-30T19:51:33.039195Z","iopub.status.idle":"2025-08-30T19:51:33.057937Z","shell.execute_reply.started":"2025-08-30T19:51:33.039175Z","shell.execute_reply":"2025-08-30T19:51:33.057335Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"if __name__ == \"__main__\":\n    # # Set memory growth for GPU\n    # gpus = tf.config.experimental.list_physical_devices('GPU')\n    # if gpus:\n    #     try:\n    #         for gpu in gpus:\n    #             tf.config.experimental.set_memory_growth(gpu, True)\n    #     except RuntimeError as e:\n    #         print(e)\n    \n    # Run main training loop\n    results = main()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T19:58:27.545962Z","iopub.execute_input":"2025-08-30T19:58:27.546727Z","iopub.status.idle":"2025-08-30T21:32:12.096074Z","shell.execute_reply.started":"2025-08-30T19:58:27.546703Z","shell.execute_reply":"2025-08-30T21:32:12.095249Z"}},"outputs":[{"name":"stdout","text":"Loading data...\nSkipping non-directory: oasis_cross-sectional-5708aa0a98d82080 (1).xlsx\nNumber of classes: 4\nClass names: ['ModerateDemented', 'NonDemented (2)', 'VeryMildDemented', 'MildDemented']\nTotal samples: 1576\nTrain samples: 1102\nValidation samples: 316\nTest samples: 158\n\n============================================================\nTraining ViT-B8-fe-NASNetLarge\n============================================================\nModel architecture created for ViT-B8-fe-NASNetLarge\nTotal parameters: 22,567,212\nEpoch 1/50\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1756584232.967492      96 service.cc:148] XLA service 0x7b4a200e22d0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1756584232.968095      96 service.cc:156]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\nI0000 00:00:1756584232.968115      96 service.cc:156]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\nI0000 00:00:1756584238.074175      96 cuda_dnn.cc:529] Loaded cuDNN version 90300\nE0000 00:00:1756584250.670164      96 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\nE0000 00:00:1756584250.827878      96 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\nE0000 00:00:1756584251.656794      96 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\nE0000 00:00:1756584251.792903      96 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\nI0000 00:00:1756584264.754610      96 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m68/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m1s\u001b[0m 1s/step - accuracy: 0.2933 - loss: 3.0617","output_type":"stream"},{"name":"stderr","text":"E0000 00:00:1756584357.396336      98 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\nE0000 00:00:1756584357.548181      98 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\nE0000 00:00:1756584358.166045      98 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\nE0000 00:00:1756584358.301923      98 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2s/step - accuracy: 0.2943 - loss: 3.0467\nEpoch 1: val_accuracy improved from -inf to 0.53797, saving model to best_ViT-B8-fe-NASNetLarge.h5\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m533s\u001b[0m 3s/step - accuracy: 0.2952 - loss: 3.0320 - val_accuracy: 0.5380 - val_loss: 1.0809 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.5051 - loss: 1.1344\nEpoch 2: val_accuracy improved from 0.53797 to 0.59494, saving model to best_ViT-B8-fe-NASNetLarge.h5\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m99s\u001b[0m 1s/step - accuracy: 0.5050 - loss: 1.1343 - val_accuracy: 0.5949 - val_loss: 0.9649 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.5313 - loss: 1.0253\nEpoch 3: val_accuracy did not improve from 0.59494\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 1s/step - accuracy: 0.5315 - loss: 1.0250 - val_accuracy: 0.5063 - val_loss: 0.9762 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.5818 - loss: 0.9331\nEpoch 4: val_accuracy did not improve from 0.59494\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 1s/step - accuracy: 0.5818 - loss: 0.9333 - val_accuracy: 0.5759 - val_loss: 0.8808 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.6427 - loss: 0.8436\nEpoch 5: val_accuracy improved from 0.59494 to 0.64873, saving model to best_ViT-B8-fe-NASNetLarge.h5\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m99s\u001b[0m 1s/step - accuracy: 0.6428 - loss: 0.8435 - val_accuracy: 0.6487 - val_loss: 0.7734 - learning_rate: 0.0010\nEpoch 6/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.6716 - loss: 0.6941\nEpoch 8: val_accuracy did not improve from 0.69937\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.6716 - loss: 0.6944 - val_accuracy: 0.6551 - val_loss: 0.7225 - learning_rate: 0.0010\nEpoch 9/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.7099 - loss: 0.6580\nEpoch 9: val_accuracy improved from 0.69937 to 0.72468, saving model to best_ViT-B8-fe-NASNetLarge.h5\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m99s\u001b[0m 1s/step - accuracy: 0.7097 - loss: 0.6582 - val_accuracy: 0.7247 - val_loss: 0.6659 - learning_rate: 0.0010\nEpoch 10/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.7083 - loss: 0.6608\nEpoch 10: val_accuracy did not improve from 0.72468\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 1s/step - accuracy: 0.7084 - loss: 0.6609 - val_accuracy: 0.7215 - val_loss: 0.6133 - learning_rate: 0.0010\nEpoch 11/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.7128 - loss: 0.6267\nEpoch 11: val_accuracy did not improve from 0.72468\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 1s/step - accuracy: 0.7128 - loss: 0.6271 - val_accuracy: 0.6930 - val_loss: 0.7185 - learning_rate: 0.0010\nEpoch 12/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.6780 - loss: 0.6840\nEpoch 12: val_accuracy did not improve from 0.72468\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.6785 - loss: 0.6835 - val_accuracy: 0.6835 - val_loss: 0.6679 - learning_rate: 0.0010\nEpoch 13/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.7149 - loss: 0.6319\nEpoch 13: val_accuracy did not improve from 0.72468\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.7147 - loss: 0.6325 - val_accuracy: 0.2880 - val_loss: 14.9978 - learning_rate: 0.0010\nEpoch 14/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.7026 - loss: 0.6282\nEpoch 14: val_accuracy did not improve from 0.72468\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 1s/step - accuracy: 0.7023 - loss: 0.6287 - val_accuracy: 0.2532 - val_loss: 67.0364 - learning_rate: 0.0010\nEpoch 15/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.7089 - loss: 0.6559\nEpoch 15: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n\nEpoch 15: val_accuracy did not improve from 0.72468\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 1s/step - accuracy: 0.7090 - loss: 0.6557 - val_accuracy: 0.3956 - val_loss: 33.7116 - learning_rate: 0.0010\nEpoch 16/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.6996 - loss: 0.6419\nEpoch 16: val_accuracy did not improve from 0.72468\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.6999 - loss: 0.6414 - val_accuracy: 0.6646 - val_loss: 1.8387 - learning_rate: 5.0000e-04\nEpoch 17/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.7553 - loss: 0.5721\nEpoch 17: val_accuracy did not improve from 0.72468\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.7552 - loss: 0.5720 - val_accuracy: 0.7184 - val_loss: 0.6239 - learning_rate: 5.0000e-04\nEpoch 18/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.7911 - loss: 0.5202\nEpoch 18: val_accuracy did not improve from 0.72468\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.7906 - loss: 0.5205 - val_accuracy: 0.6487 - val_loss: 1.0658 - learning_rate: 5.0000e-04\nEpoch 19/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.7678 - loss: 0.5254\nEpoch 19: val_accuracy improved from 0.72468 to 0.75633, saving model to best_ViT-B8-fe-NASNetLarge.h5\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 1s/step - accuracy: 0.7679 - loss: 0.5250 - val_accuracy: 0.7563 - val_loss: 0.5814 - learning_rate: 5.0000e-04\nEpoch 20/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.7928 - loss: 0.4597\nEpoch 20: val_accuracy did not improve from 0.75633\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.7927 - loss: 0.4599 - val_accuracy: 0.7152 - val_loss: 0.6156 - learning_rate: 5.0000e-04\nEpoch 21/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.7876 - loss: 0.4866\nEpoch 21: val_accuracy did not improve from 0.75633\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.7874 - loss: 0.4869 - val_accuracy: 0.7500 - val_loss: 0.5791 - learning_rate: 5.0000e-04\nEpoch 22/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.7968 - loss: 0.4606\nEpoch 22: val_accuracy did not improve from 0.75633\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.7966 - loss: 0.4610 - val_accuracy: 0.7278 - val_loss: 0.6243 - learning_rate: 5.0000e-04\nEpoch 23/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8011 - loss: 0.4850\nEpoch 23: val_accuracy did not improve from 0.75633\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8009 - loss: 0.4850 - val_accuracy: 0.7563 - val_loss: 0.5919 - learning_rate: 5.0000e-04\nEpoch 24/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8217 - loss: 0.3845\nEpoch 24: val_accuracy improved from 0.75633 to 0.76266, saving model to best_ViT-B8-fe-NASNetLarge.h5\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 1s/step - accuracy: 0.8215 - loss: 0.3851 - val_accuracy: 0.7627 - val_loss: 0.5919 - learning_rate: 5.0000e-04\nEpoch 25/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8048 - loss: 0.4728\nEpoch 25: val_accuracy did not improve from 0.76266\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8047 - loss: 0.4727 - val_accuracy: 0.7627 - val_loss: 0.5679 - learning_rate: 5.0000e-04\nEpoch 26/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8242 - loss: 0.4063\nEpoch 26: val_accuracy did not improve from 0.76266\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m96s\u001b[0m 1s/step - accuracy: 0.8240 - loss: 0.4068 - val_accuracy: 0.7468 - val_loss: 0.5897 - learning_rate: 5.0000e-04\nEpoch 27/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8212 - loss: 0.4274\nEpoch 27: val_accuracy did not improve from 0.76266\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8209 - loss: 0.4277 - val_accuracy: 0.6646 - val_loss: 0.8705 - learning_rate: 5.0000e-04\nEpoch 28/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8239 - loss: 0.4124\nEpoch 28: val_accuracy did not improve from 0.76266\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8239 - loss: 0.4124 - val_accuracy: 0.7184 - val_loss: 0.7173 - learning_rate: 5.0000e-04\nEpoch 29/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8366 - loss: 0.3996\nEpoch 29: val_accuracy did not improve from 0.76266\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8365 - loss: 0.3998 - val_accuracy: 0.6804 - val_loss: 0.9982 - learning_rate: 5.0000e-04\nEpoch 30/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8375 - loss: 0.3953\nEpoch 30: ReduceLROnPlateau reducing learning rate to 0.0002500000118743628.\n\nEpoch 30: val_accuracy did not improve from 0.76266\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8373 - loss: 0.3957 - val_accuracy: 0.7500 - val_loss: 0.5864 - learning_rate: 5.0000e-04\nEpoch 31/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8439 - loss: 0.3823\nEpoch 31: val_accuracy did not improve from 0.76266\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8440 - loss: 0.3820 - val_accuracy: 0.7468 - val_loss: 0.6457 - learning_rate: 2.5000e-04\nEpoch 32/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8581 - loss: 0.3583\nEpoch 32: val_accuracy improved from 0.76266 to 0.78481, saving model to best_ViT-B8-fe-NASNetLarge.h5\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m99s\u001b[0m 1s/step - accuracy: 0.8581 - loss: 0.3580 - val_accuracy: 0.7848 - val_loss: 0.5490 - learning_rate: 2.5000e-04\nEpoch 33/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8899 - loss: 0.2879\nEpoch 33: val_accuracy did not improve from 0.78481\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8897 - loss: 0.2884 - val_accuracy: 0.7816 - val_loss: 0.5601 - learning_rate: 2.5000e-04\nEpoch 34/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8657 - loss: 0.3477\nEpoch 34: val_accuracy did not improve from 0.78481\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8658 - loss: 0.3473 - val_accuracy: 0.7500 - val_loss: 0.6437 - learning_rate: 2.5000e-04\nEpoch 35/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8781 - loss: 0.3040\nEpoch 35: val_accuracy did not improve from 0.78481\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8781 - loss: 0.3040 - val_accuracy: 0.7722 - val_loss: 0.5860 - learning_rate: 2.5000e-04\nEpoch 36/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8901 - loss: 0.2851\nEpoch 36: val_accuracy improved from 0.78481 to 0.79430, saving model to best_ViT-B8-fe-NASNetLarge.h5\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m99s\u001b[0m 1s/step - accuracy: 0.8901 - loss: 0.2851 - val_accuracy: 0.7943 - val_loss: 0.5434 - learning_rate: 2.5000e-04\nEpoch 37/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8643 - loss: 0.3339\nEpoch 37: val_accuracy did not improve from 0.79430\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8645 - loss: 0.3337 - val_accuracy: 0.7816 - val_loss: 0.6025 - learning_rate: 2.5000e-04\nEpoch 38/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8868 - loss: 0.2919\nEpoch 38: val_accuracy did not improve from 0.79430\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8867 - loss: 0.2919 - val_accuracy: 0.7848 - val_loss: 0.5811 - learning_rate: 2.5000e-04\nEpoch 39/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8945 - loss: 0.2962\nEpoch 39: val_accuracy did not improve from 0.79430\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8943 - loss: 0.2962 - val_accuracy: 0.7816 - val_loss: 0.6049 - learning_rate: 2.5000e-04\nEpoch 40/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8904 - loss: 0.2574\nEpoch 40: val_accuracy did not improve from 0.79430\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8905 - loss: 0.2574 - val_accuracy: 0.7880 - val_loss: 0.6325 - learning_rate: 2.5000e-04\nEpoch 41/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9007 - loss: 0.2456\nEpoch 41: ReduceLROnPlateau reducing learning rate to 0.0001250000059371814.\n\nEpoch 41: val_accuracy did not improve from 0.79430\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.9007 - loss: 0.2458 - val_accuracy: 0.7468 - val_loss: 0.7663 - learning_rate: 2.5000e-04\nEpoch 42/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9077 - loss: 0.2573\nEpoch 42: val_accuracy did not improve from 0.79430\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.9075 - loss: 0.2573 - val_accuracy: 0.7816 - val_loss: 0.6220 - learning_rate: 1.2500e-04\nEpoch 43/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9061 - loss: 0.2411\nEpoch 43: val_accuracy did not improve from 0.79430\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.9061 - loss: 0.2411 - val_accuracy: 0.7785 - val_loss: 0.6839 - learning_rate: 1.2500e-04\nEpoch 44/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9210 - loss: 0.2197\nEpoch 44: val_accuracy did not improve from 0.79430\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.9211 - loss: 0.2197 - val_accuracy: 0.7848 - val_loss: 0.6252 - learning_rate: 1.2500e-04\nEpoch 45/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9233 - loss: 0.2041\nEpoch 45: val_accuracy did not improve from 0.79430\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.9232 - loss: 0.2043 - val_accuracy: 0.7943 - val_loss: 0.6223 - learning_rate: 1.2500e-04\nEpoch 46/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8939 - loss: 0.2657\nEpoch 46: ReduceLROnPlateau reducing learning rate to 6.25000029685907e-05.\n\nEpoch 46: val_accuracy did not improve from 0.79430\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8941 - loss: 0.2653 - val_accuracy: 0.7753 - val_loss: 0.6324 - learning_rate: 1.2500e-04\nEpoch 47/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9235 - loss: 0.1998\nEpoch 47: val_accuracy did not improve from 0.79430\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.9236 - loss: 0.1998 - val_accuracy: 0.7911 - val_loss: 0.6600 - learning_rate: 6.2500e-05\nEpoch 48/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9334 - loss: 0.1852\nEpoch 48: val_accuracy did not improve from 0.79430\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.9333 - loss: 0.1855 - val_accuracy: 0.7880 - val_loss: 0.6471 - learning_rate: 6.2500e-05\nEpoch 49/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9199 - loss: 0.1943\nEpoch 49: val_accuracy did not improve from 0.79430\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.9199 - loss: 0.1944 - val_accuracy: 0.7848 - val_loss: 0.6593 - learning_rate: 6.2500e-05\nEpoch 50/50\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9366 - loss: 0.1918\nEpoch 50: val_accuracy did not improve from 0.79430\n\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.9365 - loss: 0.1920 - val_accuracy: 0.7848 - val_loss: 0.6714 - learning_rate: 6.2500e-05\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x500 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m254s\u001b[0m 15s/step\n\n=== ViT-B8-fe-NASNetLarge Evaluation ===\nTest Accuracy: 0.7722\n\nClassification Report:\n                  precision    recall  f1-score   support\n\nModerateDemented       0.97      0.95      0.96        38\n NonDemented (2)       0.79      0.82      0.80        40\nVeryMildDemented       0.63      0.47      0.54        40\n    MildDemented       0.69      0.85      0.76        40\n\n        accuracy                           0.77       158\n       macro avg       0.77      0.77      0.77       158\n    weighted avg       0.77      0.77      0.77       158\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Metrics saved to alzheimer_model_results/ViT-B8-fe-NASNetLarge_metrics.json\n\n============================================================\nFINAL RESULTS\n============================================================\n\n=== MODEL COMPARISON ===\nRank  Model Name           Accuracy  \n----------------------------------------\n1     ViT-B8-fe-NASNetLarge 0.7722    \n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Comparison summary saved to alzheimer_model_results/model_comparison_summary.json\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}